--// Load the UI Library
local Library = loadstring(game:HttpGet("https://pastebin.com/raw/LKivCcbW"))()

--// Create Window
local Lib = Library.CreateLibrary("MEMBROTS", "Plants vs Brainrots")

local icon = Library.CreateFloatingIcon(Lib._mainFrame, "rbxassetid://125161562555332", 48)

--// Tabs
local Tab1 = Lib:AddTab("Home","rbxassetid://77479668856839")
local Tab2 = Lib:AddTab("Main","rbxassetid://99517913979491")
local Tab3 = Lib:AddTab("Storage","rbxassetid://95872264727664")
local Tab4 = Lib:AddTab("Others","rbxassetid://78943179033589")
---------------------------------------------------
--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

--// Remotes
local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
if not gameEvents then
    gameEvents = Instance.new("Folder")
    gameEvents.Name = "GameEvents"
    gameEvents.Parent = ReplicatedStorage
end

local autofarmEvent = gameEvents:FindFirstChild("autofarm")
if not autofarmEvent then
    autofarmEvent = Instance.new("RemoteEvent")
    autofarmEvent.Name = "autofarm"
    autofarmEvent.Parent = gameEvents
end


--// Lists
local Field = {
    "Sunflower Field",
    "Dandelion Field",
    "Mushroom Field",
    "Blue Flower Field",
    "Clover Field",
    "Strawberry Field",
    "Spider Field",
    "Bamboo Field",
    "Pineapple Patch Field",
    "Stump Field",
    "Cactus Field",
    "Pumpkin Patch Field",
    "Pine Tree Forest Field",
    "Rose Field",
    "Mountain Top Field",
    "Pepper Patch Field"
    "Coconut Field"
}

--// Globals
getgenv().autofarm = false
getgenv().SelectedField = {}

--// UI (Delta/Fluent-style)
local FieldDropdown = Tab1:AddDropdown("Pick Field", Field)
FieldDropdown.OnChanged:Connect(function(val)
    if typeof(val) == "table" then
        getgenv().SelectedField = val
    else
        getgenv().SelectedField = { val }
    end
end)

Tab1:AddToggle("autofarm", false, function(state)
    getgenv().autofarm = state
end)

-- Server-side canonical settings
local AUTOFARM_INTERVAL = 5            -- seconds between ticks
local MAX_TICKS_PER_DAY = 86400 / AUTOFARM_INTERVAL + 100 -- cap ticks per day
local MAX_SIMULTANEOUS_AUTOFARM = 1    -- only one autofarm loop per player
local MAX_FIELDS_CLAIMED_PER_TICK = 100 -- safety cap in case fields list is huge

-- Example server-side "fields" table — canonical data (IDs, base yield)
-- Replace with your game's real field definitions.
local Field = {
    {Name = "Sunflower Field"},
    {Name = "Dandelion Field"},
    {Name = "Mushroom Field"},
    {Name = "Blue Flower Field"},
    {Name = "Clover Field"},
    {Name = "Strawberry Field"},
    {Name = "Spider Field"},
    {Name = "Bamboo Field"},
    {Name = "Pineapple Patch Field"},
    {Name = "Stump Field"},
    {Name = "Cactus Field"},
    {Name = "Pumpkin Patch Field"},
    {Name = "Pine Tree Forest Field"},
    {Name = "Rose Field"},
    {Name = "Mountain Top Field"},
    {Name = "Pepper Patch Field"},
    {Name = "Coconut Field"},
    -- ... add real fields here
}

-- Per-player state
local playerState = {} -- [player] = {active = bool, lastTick = os.time(), ticks = int}

-- Admin whitelist (optional) — set UserIds of dev accounts who can bypass some limits (use carefully)
local AdminWhitelist = {
    -- [12345678] = true,
}

local function isAdmin(player)
    return AdminWhitelist[player.UserId] == true
end

-- Replace this with your real reward application logic
local function applyPollenToPlayer(player, amount)
    if not player or not player.Parent then return end
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local pollen = leaderstats:FindFirstChild("Pollen") or leaderstats:FindFirstChild("Money")
        if pollen and pollen:IsA("IntValue") then
            pollen.Value = pollen.Value + math.floor(amount)
        end
    end
end

local function computeFieldYield(field, player)
    -- compute yield server-side. Do NOT trust client data.
    -- Example: base yield + small multiplier based on player's "level" or buffs (compute server-side)
    local base = field.BasePollen or 0
    -- Example: read a server-side player stat (safely)
    local multiplier = 1
    local leaderstats = player:FindFirstChild("leaderstats")
    local level = leaderstats and leaderstats:FindFirstChild("Level")
    if level and level:IsA("IntValue") then
        multiplier = 1 + (level.Value * 0.01) -- 1% per level, example
    end
    return math.max(0, math.floor(base * multiplier))
end

local function logSuspicious(player, reason, details)
    -- Replace with persistent logging if you want; for now print
    print(("[AUTOFARM LOG] %s (UserId=%d): %s -- %s"):format(player.Name, player.UserId, reason, tostring(details)))
end

autofarmEvent.OnServerEvent:Connect(function(player, action, params)
    -- Basic type validation
    if type(action) ~= "string" then
        logSuspicious(player, "invalid_action_type", typeof(action))
        return
    end

    playerState[player] = playerState[player] or {active = false, lastTick = 0, ticks = 0, loopId = nil}

    -- Admin-only developer commands (optional)
    if action == "start_all_fields" then
        -- Prevent multiple concurrent loops
        if playerState[player].active then
            return
        end

        -- Apply per-player caps/rate-limits
        if not isAdmin(player) and playerState[player].ticks >= MAX_TICKS_PER_DAY then
            logSuspicious(player, "autofarm_tick_cap_reached", playerState[player].ticks)
            return
        end

        playerState[player].active = true
        playerState[player].lastTick = os.time()
        playerState[player].loopId = HttpService:GenerateGUID(false)

        -- Server-side loop (server authoritative)
        spawn(function()
            local loopId = playerState[player].loopId
            while player and player.Parent and playerState[player] and playerState[player].active and playerState[player].loopId == loopId do
                local now = os.time()
                if now - playerState[player].lastTick >= AUTOFARM_INTERVAL then
                    -- Extra checks
                    if not player or not player.Parent then break end
                    if playerState[player].ticks >= MAX_TICKS_PER_DAY then
                        playerState[player].active = false
                        break
                    end

                    -- Compute rewards from all fields server-side
                    local totalPollen = 0
                    local fieldsCount = 0
                    for _, field in ipairs(Fields) do
                        if fieldsCount >= MAX_FIELDS_CLAIMED_PER_TICK then
                            break -- safety cap
                        end
                        local yield = computeFieldYield(field, player)
                        totalPollen = totalPollen + yield
                        fieldsCount = fieldsCount + 1
                    end

                    -- Apply the reward server-side
                    if totalPollen > 0 then
                        applyPollenToPlayer(player, totalPollen)
                    end

                    playerState[player].ticks = playerState[player].ticks + 1
                    playerState[player].lastTick = now

                    -- Optional: send a small update event to the client (not implemented here)
                end

                wait(1) -- light wait to avoid tight loop; intervals enforced by lastTick
            end

            -- Cleanup on exit
            if playerState[player] then
                playerState[player].active = false
                playerState[player].loopId = nil
            end
        end)

    elseif action == "stop" then
        playerState[player].active = false
        playerState[player].loopId = nil

    else
        logSuspicious(player, "unknown_autofarm_action", action)
        return
    end
end)

Players.PlayerRemoving:Connect(function(player)
    playerState[player] = nil
end)
